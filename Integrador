#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <stdbool.h>
#include <string.h>

//notas: si un comentario tiene un ":p" significa que hay que borrarlo para la version final.

//Constantes
const int num_digits = 5;
const int max_attempts = 10;
const int max_players = 10;

// Estructura para el jugador
struct Player {
    char name[50];
    int score; // Puntuación del jugador
};

// Arreglo de jugadores para el ranking
struct Player ranking[MAX_PLAYERS];

// Variable para llevar el número actual de jugadores en el ranking
int num_players = 0;

//Subprograma del menu de inicio
void start(struct player *reg);

//Subprograma del juego
void juego(int ran[], int pInput[]); 

void IngresoNum(int pInput[]);

//Subprograma del menu de fin de juego
void end();

//Subprograma de los record
void record();

//CLearScreen
void erase();

// Función para actualizar el ranking
void updateRanking(struct Player player);
// // Función para mostrar el ranking
void showRanking();


//Programa principal
int main() { 
    int r_num[5];
    int input[5];
    
   srand(time(NULL)); //Generar numeros aleatorios
   struct player current_player;

   start(&current_player);
   erase();
   juego(r_num, input);
   return 0;
   
}


void start (struct player *reg){
   char resp[10];
   bool on = true;

   printf("Porfavor, ingresa tu nombre: ");
   scanf("%s", reg->name);
   do {
      printf("LA CIFRA DEL DIA \n Bienvenido %s\n El juego consiste en adivinar un número aleatorio de %d cifras. Tienes %d intentos.\n", reg->name, num_digits, max_attempts);
      printf("REGLAS:\n -Tienes 10 intentos para adivinar el numero del dia.\n-Si ingresas un numero y alguna de las cifras es correcta y esta bien ubicada, sera marcada con un 'v'.\n-Si alguna cifra esta correcta pero mal ubicada se marcara con un '-'\n-Si el numero es incorrecto se marcara con un 'x'.");
      printf("Para inicar el juego ingrese escriba 'go'\n");
      scanf("%s",resp);
      if (strcmp(resp, "go") == 0){
         on = false;
      }
         
   } while (on);
}

void erase(){
   printf("\033[2J"); // Borra la pantalla
   printf("\033[H");  // Mueve el cursor al principio
}

void IngresoNum(int pInput[]){
    int on = 0;
    int cont = 0;
    while (on == 0) {
        if (cont == 4) {
            on += 1;
        }
        printf("Ingrese un numero (este numero estará en la posición %d)\n", cont + 1);
        scanf("%d", &pInput[cont]);
        if (pInput[cont] == 0) {
            printf("No se puede ingresar 0 como primer valor\n");
        } else if (pInput[cont] < 0 || pInput[cont] > 10) {
            printf("numero fuera de rango\n");
        } else {
            cont += 1;
        }
    }
}

void juego(int ran[], int pInput[]) {

    //creacion de num random
    for (int i = 0; i<5; i++){
        ran[i] = rand() %11;
    }
    
    //comparacion start
    int intento = 0, aciertos = 0;
    bool adivinado = false;
    
    while (intento < max_attempts && (!adivinado || aciertos != 5)) {
        //ingreso de numero por parte del usuario
        IngresoNum(pInput);
        // Comparar cifra por cifra
        for (int i = 0; i < num_digits; i++) {
            if (pInput[i] == ran[i]) {
                printf("posicion %d acertada\n",(i+1));
            } else {
                // Verificar si la cifra está en la cadena oculta
                for (int j = 0; j < num_digits; j++) {
                    if (pInput[i] == ran[j]) {
                        printf("posicion %d correcta no acertada\n",(i+1));
                    } else {
                        printf("posicion %d incorrecta\n",(i+1));
                    }

                }
            }
        }
    }

    if (!adivinado) {
        printf("Lo siento, has agotado tus %d intentos. El número era: ", max_attempts);
        for (int i = 0; i < num_digits; i++) {
            printf("%d", ran[i]);
        }
        printf("\n");
    }
    //comparacion end
}
void updateRanking(struct Player player) {
    // Si el arreglo de ranking aún no está lleno, agrega al jugador directamente
    if (num_players < MAX_PLAYERS) {
        ranking[num_players] = player;
        num_players++;
    } else {
        // Si el arreglo de ranking está lleno, verifica si el jugador tiene una puntuación más alta que los actuales
        for (int i = 0; i < MAX_PLAYERS; i++) {
            if (player.score > ranking[i].score) {
                // Desplaza a los jugadores con una puntuación más baja hacia abajo
                for (int j = MAX_PLAYERS - 1; j > i; j--) {
                    ranking[j] = ranking[j - 1];
                }
                // Agrega al jugador en la posición i
                ranking[i] = player;
                break;
            }
        }
    }
}

void showRanking() {
    printf("\n--- RANKING DE JUGADORES ---\n");
    printf("Nombre\tPuntuación\n");

    for (int i = 0; i < num_players; i++) {
        printf("%s\t%d\n", ranking[i].name, ranking[i].score);
    }
    printf("\n");
}
